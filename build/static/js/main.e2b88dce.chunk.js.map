{"version":3,"sources":["utils/doRequest.js","utils/ask.js","components/players-list.js","pages/new-room-page.js","pages/join-room-page.js","pages/app.js","serviceWorker.js","index.js"],"names":["doRequest","method","url","body","cb","fetch","SERVER_ORIGIN","Object","objectSpread","headers","Content-Type","JSON","stringify","then","res","json","catch","err","console","warn","ask","text","name","prompt","PlayersList","_ref","roomId","playerName","_useState","useState","_useState2","slicedToArray","players","setPlayers","_useState3","_useState4","status","setStatus","refresh","useCallback","concat","_ref2","useEffect","setInterval","needAnswer","useMemo","inputRef","useRef","onAnswer","answer","current","value","react_default","a","createElement","keys","map","player","key","ref","type","onClick","NewRoomPage","setRoomId","setName","href","onStart","window","location","assign","target","rel","players_list","JoinRoomPage","params","URL","document","searchParams","get","error","alert","App","react_router_dom","react_router","path","new_room_page","join_room_page","Boolean","hostname","match","ReactDOM","render","app","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e2b88dce.chunk.js","sourcesContent":["const SERVER_ORIGIN = \"https://defiant-holly-hair.glitch.me\";\r\n\r\nconst doRequest = (method, url, body, cb) => {\r\n  fetch(SERVER_ORIGIN + '/api/' + url, {\r\n    method,\r\n    headers: {\r\n      \"Content-Type\": \"application/json\"\r\n    },\r\n    ...(body && { body: JSON.stringify(body) })\r\n  })\r\n    .then(res => res.json())\r\n    .then(cb).catch(err => console.warn(err));\r\n};\r\n\r\nexport default doRequest;\r\n","const ask = text => {\r\n  let name;\r\n  do {\r\n    name = prompt(text);\r\n  } while (!name);\r\n  return name;\r\n};\r\n\r\nexport default ask;\r\n","import React, { useEffect, useState, useCallback, useMemo, useRef } from \"react\";\r\nimport doRequest from \"../utils/doRequest\";\r\nimport ask from \"../utils/ask\";\r\n\r\nconst PlayersList = ({ roomId, playerName }) => {\r\n  const [players, setPlayers] = useState(null);\r\n  const [status, setStatus] = useState(null);\r\n\r\n  const refresh = useCallback(() => {\r\n    doRequest(\r\n      \"get\",\r\n      `room-status?roomId=${roomId}&playerName=${playerName}`,\r\n      null,\r\n        ({players, status}) => {\r\n        setStatus(status);\r\n        setPlayers(players);\r\n      }\r\n    );\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    refresh();\r\n    setInterval(refresh, 5000);\r\n  }, []);\r\n\r\n  const needAnswer = useMemo(() => status !== \"Ожидание игроков\" && players && !players[playerName]\r\n    , [players, status]);\r\n\r\n  const inputRef = useRef();\r\n\r\n  const onAnswer = useCallback(() => {\r\n      const answer = inputRef.current.value;\r\n      doRequest('post', 'answer', {answer, playerName, roomId})\r\n  }, [playerName, roomId]);\r\n\r\n  return (\r\n    <div>\r\n      <div>Players:</div>\r\n      {players && (\r\n          <ol>\r\n            {Object.keys(players).map(player => (\r\n                <li key={player}>{player}</li>\r\n            ))}\r\n          </ol>\r\n      )}\r\n      <div>Status: {status}</div>\r\n        {needAnswer && <input ref={inputRef} type=\"text\"/>}\r\n        {needAnswer && <button onClick={onAnswer}>Send</button>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlayersList;\r\n","import React, {useEffect, useState, useMemo, useCallback} from \"react\";\r\nimport doRequest from \"../utils/doRequest\";\r\nimport ask from \"../utils/ask\";\r\nimport PlayersList from \"../components/players-list\";\r\n\r\nconst NewRoomPage = () => {\r\n    const [roomId, setRoomId] = useState(null);\r\n    const [name, setName] = useState(null);\r\n    useEffect(() => {\r\n        const name = ask(\"Enter your name!\");\r\n        setName(name);\r\n        doRequest(\r\n            \"post\",\r\n            \"new-room\",\r\n            {name},\r\n            ({roomId}) => {\r\n                setRoomId(roomId);\r\n            }\r\n        );\r\n    }, []);\r\n\r\n    const href = useMemo(() => \"room?roomId=\" + roomId, [roomId]);\r\n\r\n    const onStart = useCallback(() => {\r\n        doRequest('post', 'start-game', {roomId}, () => {\r\n            window.location.assign(`/room?roomId=${roomId}&playerName=${name}`);\r\n        })\r\n    }, [roomId]);\r\n\r\n    return roomId ? (\r\n        <div>\r\n            <a href={href} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                Ссылка на комнату\r\n            </a>\r\n            <button onClick={onStart}>Start game</button>\r\n            <PlayersList roomId={roomId} playerName={name}/>\r\n        </div>\r\n    ) : (\r\n        \"Processing\"\r\n    );\r\n};\r\n\r\nexport default NewRoomPage;\r\n","import React, { useEffect } from \"react\";\r\nimport ask from \"../utils/ask\";\r\nimport doRequest from \"../utils/doRequest\";\r\nimport PlayersList from \"../components/players-list\";\r\n\r\nconst JoinRoomPage = () => {\r\n  let params = new URL(document.location).searchParams;\r\n  let roomId = params.get(\"roomId\");\r\n  let name = params.get(\"playerName\");\r\n\r\n  useEffect(() => {\r\n    if (!name) {\r\n      name = ask(\"Enter your name!\");\r\n      doRequest(\r\n        \"post\",\r\n        \"join-room\",\r\n        { name, roomId },\r\n        res => {\r\n          if (res.error) {\r\n            alert(res.error);\r\n            return;\r\n          }\r\n          window.location.assign(window.location.href + \"&playerName=\" + name);\r\n        }\r\n      );\r\n    }\r\n  }, []);\r\n\r\n  return name && <PlayersList roomId={roomId} playerName={name}/>;\r\n};\r\n\r\nexport default JoinRoomPage;\r\n","import React from \"react\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport NewRoomPage from \"./new-room-page\";\r\nimport JoinRoomPage from \"./join-room-page\";\r\n\r\nconst App = () => (\r\n  <Router>\r\n    <Switch>\r\n      <Route path=\"/new-room\">\r\n        <NewRoomPage />\r\n      </Route>\r\n      <Route path=\"/room\">\r\n        <JoinRoomPage />\r\n      </Route>\r\n      <Route path=\"\">\r\n        <a href=\"/new-room\">Create room</a>\r\n      </Route>\r\n    </Switch>\r\n  </Router>\r\n);\r\n\r\nexport default App;\r\n","/* eslint-disable no-console */\r\n\r\n// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit http://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./pages/app\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}